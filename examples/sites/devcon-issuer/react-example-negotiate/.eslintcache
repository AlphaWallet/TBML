[{"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/reportWebVitals.js":"1","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/tokenMock.js":"2","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/Authenticator.js":"3","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/App.js":"4","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/index.js":"5","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/Card/index.js":"6","/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/Modal/index.js":"7","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/reportWebVitals.js":"8","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Modal/index.js":"9","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/tokenMock.js":"10","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/index.js":"11","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/Negotiator.js":"12","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Card/index.js":"13","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/index.js":"14","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/App.js":"15","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/Authenticator.js":"16","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/PublicKeyInfo.js":"17","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/AlgorithmIdentifier.js":"18","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/SignedDevonTicket.js":"19"},{"size":362,"mtime":1608198576024,"results":"20","hashOfConfig":"21"},{"size":328,"mtime":1609223802183,"results":"22","hashOfConfig":"21"},{"size":484,"mtime":1609224154141,"results":"23","hashOfConfig":"21"},{"size":2559,"mtime":1609224493471,"results":"24","hashOfConfig":"21"},{"size":135,"mtime":1609197633703,"results":"25","hashOfConfig":"21"},{"size":1590,"mtime":1609199184014,"results":"26","hashOfConfig":"21"},{"size":248,"mtime":1609070027898,"results":"27","hashOfConfig":"21"},{"size":362,"mtime":1609833486615,"results":"28","hashOfConfig":"29"},{"size":248,"mtime":1609833486284,"results":"30","hashOfConfig":"29"},{"size":328,"mtime":1609833486355,"results":"31","hashOfConfig":"29"},{"size":135,"mtime":1609835939590,"results":"32","hashOfConfig":"29"},{"size":5007,"mtime":1609930520122,"results":"33","hashOfConfig":"29"},{"size":1188,"mtime":1609833486284,"results":"34","hashOfConfig":"29"},{"size":500,"mtime":1609833486584,"results":"35","hashOfConfig":"29"},{"size":1403,"mtime":1609929378193,"results":"36","hashOfConfig":"29"},{"size":451,"mtime":1609833486286,"results":"37","hashOfConfig":"29"},{"size":3246,"mtime":1609848361992,"results":"38","hashOfConfig":"29"},{"size":6969,"mtime":1609848361992,"results":"39","hashOfConfig":"29"},{"size":7359,"mtime":1609848361992,"results":"40","hashOfConfig":"29"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"71qmq9",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"d9kpgq",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":4,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":3,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/reportWebVitals.js",[],["90","91"],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/tokenMock.js",["92"],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/Authenticator.js",[],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/App.js",["93","94","95"],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/TokenScript/index.js",[],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/Card/index.js",[],"/Users/nicktaras/Documents/github/blockchain-attestation/playground/react-test/src/Modal/index.js",[],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/reportWebVitals.js",[],["96","97"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Modal/index.js",[],["98","99"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/tokenMock.js",["100"],"export default [\n  { token: { ticketId: 42, ticketClass: \"VIP\", conferenceId: 1, isValid: true }, ownerAddress: null },\n  { token: { ticketId: 32, ticketClass: \"STANDARD\", conferenceId: 2, isValid: true }, ownerAddress: 2 },\n  { token: { ticketId: 15, ticketClass: \"VIP\", conferenceId: 3, isValid: true }, ownerAddress: 2 },\n];\n","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/index.js",[],["101","102"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/Negotiator.js",["103","104"],"// https://github.com/TokenScript/attestation/blob/main/src/main/javascript/SignedDevonTicket.js\nimport { SignedDevconTicket } from './../Attestation/SignedDevonTicket';\n\nexport class Negotiator {\n  constructor(filter) {\n    this.filter = filter;\n  }\n\n  // Modal / Auto Attestation\n  async negotiate() {\n    return true;\n  }\n\n  // Get the token instances (with filter)\n  async getTokenInstances() {\n    // Get ticket from params - to add to local storage / read into app\n    const urlParams = new URLSearchParams(window.location.search);\n    const ticketFromQuery = urlParams.get('ticket');\n    const secretFromQuery = urlParams.get('secret');\n    // Get the current Storage Tokens (DER format)\n    const storageTickets = localStorage.getItem('dcTokens');\n    // Decode the current ticket (DER format)\n    // root object { commitment, publicKeyInfo, signatureValue, ticket } \n    // ticket example: \"SignedDevconTicket{ticket: DevconTicket {devconId: 6n,ticketId: 417541561855n,ticketClass: 0n},commitment: ArrayBuffer {[Uint8Contents]: <04 12 35 64 9d 5b fd 29 fe c5 d8 5b 6d e9 05 4e dc 8d 36 79 16 9d 88 4d 64 27 a9 2f af dd f8 fd 30 29 38 b6 71 ae 1e 46 2f 78 cb a0 4c fd 26 fe 36 16 ca 4f bf f2 c7 15 ae 8c f4 06 8e b8 b0 2f 22>,byteLength: 65},publicKeyInfo: PublicKeyInfo { signatureAlgorithm: undefined, publicKey: undefined },signatureValue: ArrayBuffer {[Uint8Contents]: <30 44 02 20 70 2c af bd e4 d3 d9 a3 45 b4 d4 70 c1 7f 26 62 b1 9d 8a 68 da f3 a1 6b b1 45 5f e7 86 31 8b 30 02 20 68 e3 f8 79 55 48 34 7e 71 33 c0 af f4 e5 43 77 23 86 dc 1c 54 ab 23 d5 40 eb 83 53 d3 da 0b da>,byteLength: 70}}'\";\n    let ticketDecodedString;\n    let ticketObject = {};\n    if (ticketFromQuery) {\n      ticketDecodedString = new SignedDevconTicket(ticketFromQuery);\n      // Read from Decoded ticket String\n      ticketObject = ticketDecodedString.ticket;\n    }\n    // Check if the ticket is valid (has data)\n    const isValidTicket = (\n      ticketObject.ticketId,\n      ticketObject.ticketClass,\n      ticketObject.devconId\n    );\n    // Tickets for storage (raw) and for web view\n    const tickets = {\n      raw: [],\n      web: []\n    };\n    // If Valid, return web friendly tickets\n    if (isValidTicket) {\n      // Check if its new or an existing ticket id:\n      // If the ticket from the query is new / or to replace an existing ticket\n      let isNewQueryTicket = true;\n      if (storageTickets && storageTickets.length) {\n        // Build new list of tickets from current and query ticket { ticket, secret }\n        JSON.parse(storageTickets).map((ticketBlob) => {\n          // Decoded string to JS Object\n          const storedTicketObject = new SignedDevconTicket(ticketBlob.ticket);\n          // If the same as a previous ticket - replace with the new ticket\n          if (storedTicketObject.ticket.ticketId === ticketObject.ticketId) {\n            // If new push the DER of the ticket into localstorage\n            tickets.raw.push({ ticket: ticketFromQuery, secret: secretFromQuery });\n            // Push a js object\n            tickets.web.push({\n              devconId: ticketObject.devconId.toString(),\n              ticketId: ticketObject.ticketId.toString(),\n              ticketClass: ticketObject.ticketClass.toString()\n            });\n            isNewQueryTicket = false;\n          } else {\n            // Else push the original DER - Check this is correct.\n            tickets.raw.push(ticketBlob); // contains the ticket and secret\n            tickets.web.push({\n              devconId: storedTicketObject.ticket.devconId.toString(),\n              ticketId: storedTicketObject.ticket.ticketId.toString(),\n              ticketClass: storedTicketObject.ticket.ticketClass.toString()\n            });\n          }\n        });\n      }\n      // Add ticket if new\n      if (isNewQueryTicket) {\n        tickets.raw.push({ ticket: ticketFromQuery, secret: secretFromQuery }); // new raw object\n        tickets.web.push({\n          devconId: ticketObject.devconId.toString(),\n          ticketId: ticketObject.ticketId.toString(),\n          ticketClass: ticketObject.ticketClass.toString()\n        });\n      }\n      // Set New tokens list raw only, websters will be decoded each time\n      localStorage.setItem('dcTokens', JSON.stringify(tickets.raw));\n    } else { // no ticket in browser window, search for localstorage items\n      if (storageTickets && storageTickets.length) {\n        JSON.parse(storageTickets).map((ticketBlob) => {\n          // Decoded string to JS Object\n          const storedTicketObject = new SignedDevconTicket(ticketBlob.ticket);\n          // Push the original DER\n          tickets.raw.push(ticketBlob);\n          tickets.web.push({\n            devconId: storedTicketObject.ticket.devconId.toString(),\n            ticketId: storedTicketObject.ticket.ticketId.toString(),\n            ticketClass: storedTicketObject.ticket.ticketClass.toString()\n          });\n        });\n      }\n    }\n\n    // Return tickets for web\n    return tickets.web ? tickets.web : [];\n  }\n}","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Card/index.js",["105"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport './Card.css';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nfunction MediaCard({ tokenInstance }) {\n  const classes = useStyles();\n  return (\n    <Card className=\"card\">\n      <CardMedia\n        className={classes.media}\n        image=\"./mock.png\"\n        title=\"token\"\n      />\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {tokenInstance.ticketClass}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Ticket Id: {tokenInstance.ticketId}\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Devcon Id: {tokenInstance.devconId}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default MediaCard;\n",["106","107"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/index.js",[],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/App.js",["108","109"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/TokenScript/Authenticator.js",[],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/PublicKeyInfo.js",["110","111","112","113"],"import {\n  BitString,\n  compareSchema,\n  Integer,\n  OctetString,\n  Sequence,\n  fromBER,\n  Any,\n  ObjectIdentifier\n} from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class PublicKeyInfo {\n  //**********************************************************************************\n  /**\n   * Constructor for PublicKeyInfo class\n   * @param {Object} [source={}]\n   * @param {Object} [source.schema] asn1js parsed value to initialize the class from\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\n   */\n  constructor(source = {}) {\n    if (typeof(source) == \"string\") {\n      throw new TypeError(\"Not accepting string. For base64, convert to ArrayBuffer.\")\n    }\n    if (source instanceof ArrayBuffer) {\n      const asn1 = fromBER(source)\n      this.fromSchema(asn1.result);\n    } else {\n      /**\n       * @type {string}\n       * @desc ObjectIdentifier for algorithm (string representation)\n       */\n      this.signatureAlgorithm = getParametersValue(\n          source,\n          \"signatureAlgorithm\"\n      );\n\t  this.publicKey = getParametersValue(\n          source,\n          \"publicKey\"\n      );\n    }\n  }\n \n  //**********************************************************************************\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * PublicKeyInfo  ::=  Sequence  {\n   *    signatureAlgorithm               AlgorithmIdentifier,\n   *    publicKey              BIT-STRING  }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    /**\n     * @type {Object}\n     * @property {string} signatureAlgorithm ObjectIdentifier for the algorithm\n     * @property {string} publicKey Any algorithm parameters\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new Sequence({\n      name: names.blockName || \"\",\n      optional: true,\n      value: [\n\t\tAlgorithmIdentifier.schema(\n\t\t\tnames.signatureAlgorithm || {\n\t\t\t  names: {\n\t\t\t\tblockName: \"signatureAlgorithm\",\n\t\t\t  },\n\t\t\t}\n\t\t),\n        new BitString({ name: \"publicKey\"}),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"signatureAlgorithm\", \"publicKey\"]);\n    //endregion\n\n    //region Check the schema is valid\n    const asn1 = compareSchema(\n      schema,\n      schema,\n      PublicKeyInfo.schema({\n        names: {\n          signatureAlgorithm: \"signatureAlgorithm\",\n          publicKey: \"publicKey\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for AlgorithmIdentifier\"\n      );\n    //endregion\n  }\n}\n//**************************************************************************************\n",["114","115"],"/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/AlgorithmIdentifier.js",["116","117","118","119"],"import { Any, compareSchema, ObjectIdentifier, Sequence } from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class AlgorithmIdentifier {\n  //**********************************************************************************\n  /**\n   * Constructor for AlgorithmIdentifier class\n   * @param {Object} [source={}]\n   * @param {Object} [source.schema] asn1js parsed value to initialize the class from\n   * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\n   */\n  constructor(source = {}) {\n    if (typeof(source) == \"string\") {\n      throw new TypeError(\"Unimplemented: Not accepting string yet.\")\n    }\n    if (source instanceof ArrayBuffer) {\n      const asn1 = fromBER(source)\n      this.fromSchema(asn1.result);\n    } else {\n      /**\n       * @type {string}\n       * @desc ObjectIdentifier for algorithm (string representation)\n       */\n      this.algorithmId = getParametersValue(\n          source,\n          \"algorithmId\"\n      );\n\n      if (\"algorithmParams\" in source)\n        /**\n         * @type {Object}\n         * @desc Any algorithm source\n         */\n        this.algorithmParams = getParametersValue(\n            source,\n            \"algorithmParams\",\n            AlgorithmIdentifier.defaultValues(\"algorithmParams\")\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return default values for all class members\n   * @param {string} memberName String name for a class member\n   */\n   /* FIXME: algorithmParams is options hence not removed and we need to complete this with all parameters with their default value covered here.\n   */\n  static defaultValues(memberName) {\n    switch (memberName) {\n      case \"algorithmParams\":\n        return new Any();\n      default:\n        throw new Error(\n          `Invalid member name for AlgorithmIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Compare values with default values for all class members\n   * @param {string} memberName String name for a class member\n   * @param {*} memberValue Value to compare with default value\n   */\n  static compareWithDefault(memberName, memberValue) {\n    switch (memberName) {\n      case \"algorithmId\":\n        return memberValue === \"\";\n      case \"algorithmParams\":\n        return memberValue instanceof asn1js.Any;\n      default:\n        throw new Error(\n          `Invalid member name for AlgorithmIdentifier class: ${memberName}`\n        );\n    }\n  }\n  //**********************************************************************************\n  /**\n   * Return value of pre-defined ASN.1 schema for current class\n   *\n   * ASN.1 schema:\n   * ```asn1\n   * AlgorithmIdentifier  ::=  Sequence  {\n   *    algorithm               OBJECT IDENTIFIER,\n   *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\n   * ```\n   *\n   * @param {Object} parameters Input parameters for the schema\n   * @returns {Object} asn1js schema object\n   */\n  static schema(parameters = {}) {\n    /**\n     * @type {Object}\n     * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\n     * @property {string} algorithmParams Any algorithm parameters\n     */\n    const names = getParametersValue(parameters, \"names\", {});\n\n    return new Sequence({\n      name: names.blockName || \"\",\n      optional: names.optional || false,\n      value: [\n        new ObjectIdentifier({ name: names.algorithmIdentifier || \"algorithm\" }),\n        new Any({ name: names.algorithmParams || \"parameters\", optional: true }),\n      ],\n    });\n  }\n  //**********************************************************************************\n  /**\n   * Convert parsed asn1js object into current class\n   * @param {!Object} schema\n   */\n  fromSchema(schema) {\n    //region Clear input data first\n    clearProps(schema, [\"algorithm\", \"params\"]);\n    //endregion\n\n    //region Check the schema is valid\n    const asn1 = compareSchema(\n      schema,\n      schema,\n      AlgorithmIdentifier.schema({\n        names: {\n          algorithmIdentifier: \"algorithm\",\n          algorithmParams: \"params\",\n        },\n      })\n    );\n\n    if (asn1.verified === false)\n      throw new Error(\n        \"Object's schema was not verified against input data for AlgorithmIdentifier\"\n      );\n    //endregion\n\n    //region Get internal properties from parsed schema\n    this.algorithmId = asn1.result.algorithm.valueBlock.toString();\n    if (\"params\" in asn1.result) this.algorithmParams = asn1.result.params;\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convert current object to asn1js object and set correct values\n   * @returns {Object} asn1js object\n   */\n  toSchema() {\n    //region Create array for output sequence\n    const outputArray = [];\n\n    outputArray.push(new ObjectIdentifier({ value: this.algorithmId }));\n    if (\n      \"algorithmParams\" in this &&\n      this.algorithmParams instanceof asn1js.Any === false\n    )\n      outputArray.push(this.algorithmParams);\n    //endregion\n\n    //region Construct and return new ASN.1 schema for this object\n    return new Sequence({\n      value: outputArray,\n    });\n    //endregion\n  }\n  //**********************************************************************************\n  /**\n   * Convertion for the class to JSON object\n   * @returns {Object}\n   */\n  toJSON() {\n    const object = {\n      algorithmId: this.algorithmId,\n    };\n\n    if (\n      \"algorithmParams\" in this &&\n      this.algorithmParams instanceof asn1js.Any === false\n    )\n      object.algorithmParams = this.algorithmParams.toJSON();\n\n    return object;\n  }\n  //**********************************************************************************\n  /**\n   * Check that two \"AlgorithmIdentifiers\" are equal\n   * @param {AlgorithmIdentifier} algorithmIdentifier\n   * @returns {boolean}\n   */\n  isEqual(algorithmIdentifier) {\n    //region Check input type\n    if (algorithmIdentifier instanceof AlgorithmIdentifier === false)\n      return false;\n    //endregion\n\n    //region Check \"algorithm_id\"\n    if (this.algorithmId !== algorithmIdentifier.algorithmId) return false;\n    //endregion\n\n    //region Check \"algorithm_params\"\n    if (\"algorithmParams\" in this) {\n      if (\"algorithmParams\" in algorithmIdentifier)\n        return (\n          JSON.stringify(this.algorithmParams) ===\n          JSON.stringify(algorithmIdentifier.algorithmParams)\n        );\n\n      return false;\n    }\n\n    if (\"algorithmParams\" in algorithmIdentifier) return false;\n    //endregion\n\n    return true;\n  }\n  //**********************************************************************************\n}\n//**************************************************************************************\n","/Users/nicktaras/Documents/github/TokenScript/examples/sites/devcon-issuer/react-example-negotiate/src/Attestation/SignedDevonTicket.js",["120","121","122","123"],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":1,"nodeType":"130","endLine":5,"endColumn":3},{"ruleId":"131","severity":2,"message":"132","line":37,"column":3,"nodeType":"133","messageId":"134","endLine":37,"endColumn":24},{"ruleId":"135","severity":1,"message":"136","line":40,"column":16,"nodeType":"137","messageId":"138","endLine":40,"endColumn":18},{"ruleId":"139","severity":1,"message":"140","line":66,"column":6,"nodeType":"141","endLine":66,"endColumn":8,"suggestions":"142"},{"ruleId":"124","replacedBy":"143"},{"ruleId":"126","replacedBy":"144"},{"ruleId":"124","replacedBy":"145"},{"ruleId":"126","replacedBy":"146"},{"ruleId":"128","severity":1,"message":"129","line":1,"column":1,"nodeType":"130","endLine":5,"endColumn":3},{"ruleId":"124","replacedBy":"147"},{"ruleId":"126","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":50,"column":53,"nodeType":"151","messageId":"152","endLine":50,"endColumn":55},{"ruleId":"149","severity":1,"message":"150","line":88,"column":53,"nodeType":"151","messageId":"152","endLine":88,"endColumn":55},{"ruleId":"153","severity":1,"message":"154","line":4,"column":8,"nodeType":"133","messageId":"155","endLine":4,"endColumn":22},{"ruleId":"124","replacedBy":"156"},{"ruleId":"126","replacedBy":"157"},{"ruleId":"153","severity":1,"message":"158","line":10,"column":7,"nodeType":"133","messageId":"155","endLine":10,"endColumn":11},{"ruleId":"139","severity":1,"message":"159","line":33,"column":6,"nodeType":"141","endLine":33,"endColumn":8,"suggestions":"160"},{"ruleId":"153","severity":1,"message":"161","line":4,"column":3,"nodeType":"133","messageId":"155","endLine":4,"endColumn":10},{"ruleId":"153","severity":1,"message":"162","line":5,"column":3,"nodeType":"133","messageId":"155","endLine":5,"endColumn":14},{"ruleId":"153","severity":1,"message":"163","line":8,"column":3,"nodeType":"133","messageId":"155","endLine":8,"endColumn":6},{"ruleId":"153","severity":1,"message":"164","line":9,"column":3,"nodeType":"133","messageId":"155","endLine":9,"endColumn":19},{"ruleId":"124","replacedBy":"165"},{"ruleId":"126","replacedBy":"166"},{"ruleId":"131","severity":2,"message":"167","line":20,"column":20,"nodeType":"133","messageId":"134","endLine":20,"endColumn":27},{"ruleId":"131","severity":2,"message":"168","line":72,"column":39,"nodeType":"133","messageId":"134","endLine":72,"endColumn":45},{"ruleId":"131","severity":2,"message":"168","line":155,"column":39,"nodeType":"133","messageId":"134","endLine":155,"endColumn":45},{"ruleId":"131","severity":2,"message":"168","line":178,"column":39,"nodeType":"133","messageId":"134","endLine":178,"endColumn":45},{"ruleId":"153","severity":1,"message":"169","line":10,"column":8,"nodeType":"133","messageId":"155","endLine":10,"endColumn":27},{"ruleId":"131","severity":2,"message":"170","line":91,"column":23,"nodeType":"133","messageId":"134","endLine":91,"endColumn":29},{"ruleId":"131","severity":2,"message":"170","line":96,"column":23,"nodeType":"133","messageId":"134","endLine":96,"endColumn":29},{"ruleId":"131","severity":2,"message":"170","line":101,"column":26,"nodeType":"133","messageId":"134","endLine":101,"endColumn":32},"no-native-reassign",["171"],"no-negated-in-lhs",["172"],"import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","no-undef","'selectVIPEventHandler' is not defined.","Identifier","undef","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Negotiator'. Either include it or remove the dependency array.","ArrayExpression",["173"],["171"],["172"],["171"],["172"],["171"],["172"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'CardActionArea' is defined but never used.","unusedVar",["171"],["172"],"'web3' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'negotiator'. Either include it or remove the dependency array.",["174"],"'Integer' is defined but never used.","'OctetString' is defined but never used.","'Any' is defined but never used.","'ObjectIdentifier' is defined but never used.",["171"],["172"],"'fromBER' is not defined.","'asn1js' is not defined.","'AlgorithmIdentifier' is defined but never used.","'BigInt' is not defined.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [Negotiator]",{"range":"179","text":"180"},"Update the dependencies array to be: [negotiator]",{"range":"181","text":"182"},[2201,2203],"[Negotiator]",[1045,1047],"[negotiator]"]